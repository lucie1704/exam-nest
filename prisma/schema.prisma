// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TWO_FACTOR_AUTH
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  firstName String
  lastName  String
  birthDate DateTime @default(now())
  role      Role     @default(USER)
  tokens    Token[]
  watchlist WatchlistItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
}

model Token {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      TokenType
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
}

model Movie {
  id          String   @id @default(uuid())
  title       String
  description String?
  releaseYear Int?
  genre       String?
  director    String?
  posterUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  watchlist   WatchlistItem[]
}

model WatchlistItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String
  status    WatchStatus @default(WANT_TO_WATCH)
  rating    Int?     // Note sur 5
  notes     String?  // Notes personnelles
  watchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, movieId])
}

enum WatchStatus {
  WANT_TO_WATCH
  WATCHING
  WATCHED
  DROPPED
}
